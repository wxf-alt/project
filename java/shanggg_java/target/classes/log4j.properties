### set log levels ###
# 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# <!-- ========================== 自定义输出格式说明================================ -->
# <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
# <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数  -->
# <!-- %c 输出所属的类目，通常就是所在类的全名 -->
# <!-- %t 输出产生该日志事件的线程名 -->
# <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->
# <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->
# <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlo4.main(TestLog4.java:10)  -->
# <!-- ========================================================================== -->
#
# <!-- ========================== 输出方式说明================================ -->
# <!-- Log4j提供的appender有以下几种:  -->
# <!-- org.apache.log4j.ConsoleAppender(控制台),  -->
# <!-- org.apache.log4j.FileAppender(文件),  -->
# <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->
# <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->
# <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->
# <!-- ========================================================================== -->
log4j.rootLogger=WARN
### console ###
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%-d{yyyy-MM-dd HH\:mm\:ss} [%p]-[%c] %m%n
#### log file ###
#log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.debug.File=${user.dir}/src/log/syslog.log
#log4j.appender.debug.Append=true
#log4j.appender.debug.Threshold=INFO
#log4j.appender.debug.layout=org.apache.log4j.PatternLayout
#log4j.appender.debug.layout.ConversionPattern=%-d{yyyy-MM-dd HH\:mm\:ss} [%p]-[%c] %m%n
### exception ###
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File=${user.dir}/src/log/error.log
log4j.appender.error.Append=true
log4j.appender.error.Threshold=ERROR
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=%-d{yyyy-MM-dd HH\:mm\:ss} [%p]-[%c] %m%n
### 需要声明，然后下方才可以使druid sql输出，否则会抛出log4j.error.key not found
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ISO8601} %l %c%n%p: %m%n
### druid sql ###
log4j.logger.druid.sql=warn,stdout
log4j.logger.druid.sql.DataSource=warn,stdout
log4j.logger.druid.sql.Connection=warn,stdout
log4j.logger.druid.sql.Statement=warn,stdout
log4j.logger.druid.sql.ResultSet=warn,stdout